---
export interface Props {
  class?: string;
  delay?: number;
  direction?: 'up' | 'down' | 'left' | 'right' | 'fade';
}

const { class: className = '', delay = 0, direction = 'fade' } = Astro.props;

const animationClasses = {
  'up': 'translate-y-8 opacity-0',
  'down': '-translate-y-8 opacity-0',
  'left': 'translate-x-8 opacity-0',
  'right': '-translate-x-8 opacity-0',
  'fade': 'opacity-0'
};

const initialClass = animationClasses[direction];
---

<section 
  class={`animate-on-scroll ${initialClass} ${className}`}
  style={`animation-delay: ${delay}ms;`}
>
  <slot />
</section>

<style>
  .animate-on-scroll {
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .animate-on-scroll.animate-in {
    transform: translate(0, 0) !important;
    opacity: 1 !important;
  }

  /* Stagger children animations */
  .animate-on-scroll.animate-in > * {
    animation: staggerIn 0.4s ease-out forwards;
  }

  .animate-on-scroll.animate-in > *:nth-child(1) { animation-delay: 0.1s; }
  .animate-on-scroll.animate-in > *:nth-child(2) { animation-delay: 0.2s; }
  .animate-on-scroll.animate-in > *:nth-child(3) { animation-delay: 0.3s; }
  .animate-on-scroll.animate-in > *:nth-child(4) { animation-delay: 0.4s; }

  @keyframes staggerIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Lightweight intersection observer
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
      }
    });
  }, observerOptions);

  // Observe all animated sections
  document.querySelectorAll('.animate-on-scroll').forEach(el => {
    observer.observe(el);
  });
</script> 