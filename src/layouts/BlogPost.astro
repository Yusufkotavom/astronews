---
// Enhanced Blog Post Layout with Advanced Features
import Layout from './Layout.astro';
import CategorySidebar from '../components/partials/CategorySidebar.astro';
import { getCachedPosts, formatDate } from '../utils/content-utils';

export interface Props {
  frontmatter: {
    title: string;
    description: string;
    author?: string;
    authorBio?: string;
    authorImage?: string;
    publishDate: string;
    updateDate?: string;
    category?: string;
    tags?: string[];
    image?: string;
    imageAlt?: string;
    featured?: boolean;
    readingTime?: number;
    difficulty?: 'Beginner' | 'Intermediate' | 'Advanced';
    tableOfContents?: boolean;
    series?: string;
    seriesOrder?: number;
    lang?: string;
    keywords?: string[];
    relatedPosts?: string[];
  };
}

const { frontmatter } = Astro.props;

// Calculate reading time if not provided
function calculateReadingTime(content: string): number {
  const wordsPerMinute = 200;
  const words = content.trim().split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

// Get word count
function getWordCount(content: string): number {
  return content.trim().split(/\s+/).length;
}

// Get all posts for various calculations
const allPosts = await getCachedPosts();

// Get related posts (enhanced logic)
let relatedPosts = [];

// First, try to get manually specified related posts
if (frontmatter.relatedPosts && frontmatter.relatedPosts.length > 0) {
  relatedPosts = allPosts.filter(post => 
    frontmatter.relatedPosts.includes(post.slug) && 
    post.data.title !== frontmatter.title
  );
}

// If not enough manual related posts, add automatic ones
if (relatedPosts.length < 3) {
  const automaticRelated = allPosts
    .filter(post => {
      if (post.data.title === frontmatter.title) return false;
      if (relatedPosts.some(rp => rp.slug === post.slug)) return false;
      
      // Score based on category, tags, and series
      let score = 0;
      if (post.data.category === frontmatter.category) score += 3;
      if (frontmatter.tags && post.data.tags) {
        const commonTags = frontmatter.tags.filter(tag => 
          Array.isArray(post.data.tags) ? post.data.tags.includes(tag) : false
        );
        score += commonTags.length;
      }
      if (frontmatter.series && post.data.series === frontmatter.series) score += 5;
      
      return score > 0;
    })
    .sort((a, b) => {
      // Calculate scores for sorting
      let scoreA = 0, scoreB = 0;
      
      if (a.data.category === frontmatter.category) scoreA += 3;
      if (b.data.category === frontmatter.category) scoreB += 3;
      
      if (frontmatter.tags) {
        if (a.data.tags) {
          const commonTagsA = frontmatter.tags.filter(tag => 
            Array.isArray(a.data.tags) ? a.data.tags.includes(tag) : false
          );
          scoreA += commonTagsA.length;
        }
        if (b.data.tags) {
          const commonTagsB = frontmatter.tags.filter(tag => 
            Array.isArray(b.data.tags) ? b.data.tags.includes(tag) : false
          );
          scoreB += commonTagsB.length;
        }
      }
      
      if (frontmatter.series) {
        if (a.data.series === frontmatter.series) scoreA += 5;
        if (b.data.series === frontmatter.series) scoreB += 5;
      }
      
      if (scoreA !== scoreB) return scoreB - scoreA;
      
      // If scores are equal, sort by date
      return new Date(b.data.publishDate || 0).getTime() - new Date(a.data.publishDate || 0).getTime();
    })
    .slice(0, 3 - relatedPosts.length);
  
  relatedPosts = [...relatedPosts, ...automaticRelated];
}

// Get series posts if this post is part of a series
const seriesPosts = frontmatter.series 
  ? allPosts
      .filter(post => post.data.series === frontmatter.series)
      .sort((a, b) => (a.data.seriesOrder || 0) - (b.data.seriesOrder || 0))
  : [];

// Get next and previous posts in series
const currentSeriesIndex = seriesPosts.findIndex(post => post.data.title === frontmatter.title);
const previousPost = currentSeriesIndex > 0 ? seriesPosts[currentSeriesIndex - 1] : null;
const nextPost = currentSeriesIndex < seriesPosts.length - 1 ? seriesPosts[currentSeriesIndex + 1] : null;

// Enhanced Schema markup for blog post
const blogPostSchema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": frontmatter.title,
  "description": frontmatter.description,
  "author": {
    "@type": "Person",
    "name": frontmatter.author || "Kotacom Team",
    ...(frontmatter.authorImage && { "image": `https://www.kotacom.id${frontmatter.authorImage}` }),
    ...(frontmatter.authorBio && { "description": frontmatter.authorBio })
  },
  "publisher": {
    "@type": "Organization",
    "name": "Kotacom",
    "logo": {
      "@type": "ImageObject",
      "url": "https://www.kotacom.id/logo-full.svg"
    }
  },
  "datePublished": frontmatter.publishDate,
  "dateModified": frontmatter.updateDate || frontmatter.publishDate,
  "image": frontmatter.image ? `https://www.kotacom.id${frontmatter.image}` : "https://www.kotacom.id/og-image.jpg",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://www.kotacom.id${Astro.url.pathname}`
  },
  "wordCount": getWordCount(frontmatter.description),
  "timeRequired": `PT${frontmatter.readingTime || calculateReadingTime(frontmatter.description)}M`,
  ...(frontmatter.keywords && { "keywords": frontmatter.keywords.join(", ") }),
  ...(frontmatter.category && { "articleSection": frontmatter.category }),
  "inLanguage": frontmatter.lang || "en-US"
};

// Add series information to schema if applicable
if (frontmatter.series) {
  blogPostSchema["isPartOf"] = {
    "@type": "BlogSeries",
    "name": frontmatter.series,
    "position": frontmatter.seriesOrder || 1
  };
}

const pageTitle = `${frontmatter.title} | Kotacom Blog`;
const canonicalUrl = `https://www.kotacom.id${Astro.url.pathname}`;

// Get difficulty color
function getDifficultyColor(difficulty: string) {
  switch (difficulty) {
    case 'Beginner': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
    case 'Intermediate': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
    case 'Advanced': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
    default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';
  }
}
---

<Layout
  title={pageTitle}
  description={frontmatter.description}
  canonical={canonicalUrl}
  author={frontmatter.author}
  publishDate={frontmatter.publishDate}
  updateDate={frontmatter.updateDate}
  image={frontmatter.image}
  imageAlt={frontmatter.imageAlt}
  category={frontmatter.category}
  tags={frontmatter.tags}
  type="post"
  schemaMarkup={JSON.stringify(blogPostSchema)}
>
  <div class="bg-white dark:bg-gray-900">
    <!-- Article Header -->
    <article class="max-w-7xl mx-auto px-4 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        
        <!-- Main Content -->
        <div class="lg:col-span-3">
          <!-- Breadcrumb -->
          <nav class="mb-6">
            <ol class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
              <li><a href="/" class="hover:text-gray-700 dark:hover:text-gray-300">Home</a></li>
              <li>/</li>
              <li><a href="/blog" class="hover:text-gray-700 dark:hover:text-gray-300">Blog</a></li>
              {frontmatter.category && (
                <>
                  <li>/</li>
                  <li><a href={`/category/${frontmatter.category.toLowerCase().replace(/\s+/g, '-')}`} class="hover:text-gray-700 dark:hover:text-gray-300">{frontmatter.category}</a></li>
                </>
              )}
              <li>/</li>
              <li class="text-gray-900 dark:text-white font-medium truncate">{frontmatter.title}</li>
            </ol>
          </nav>

          <!-- Series Navigation (if part of a series) -->
          {frontmatter.series && (
            <div class="mb-8 p-4 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg">
              <div class="flex items-center mb-2">
                <svg class="w-5 h-5 text-blue-600 dark:text-blue-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zM2 15a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1z" />
                </svg>
                <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100">Part of: {frontmatter.series}</h3>
              </div>
              <p class="text-sm text-blue-800 dark:text-blue-200 mb-3">
                Article {frontmatter.seriesOrder || currentSeriesIndex + 1} of {seriesPosts.length} in this series
              </p>
              <div class="flex flex-wrap gap-2">
                {seriesPosts.map((post, index) => (
                  <a 
                    href={`/${post.slug}`}
                    class={`px-3 py-1 text-xs rounded-full transition-colors duration-200 ${
                      post.data.title === frontmatter.title
                        ? 'bg-blue-600 text-white'
                        : 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-200 hover:bg-blue-200 dark:hover:bg-blue-700'
                    }`}
                  >
                    {index + 1}. {post.data.title.length > 30 ? post.data.title.substring(0, 30) + '...' : post.data.title}
                  </a>
                ))}
              </div>
            </div>
          )}

          <!-- Article Meta -->
          <div class="mb-8">
            <div class="flex flex-wrap items-center gap-3 mb-4">
              {frontmatter.category && (
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">
                  <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14-7H5m14 14H5"></path>
                  </svg>
                  {frontmatter.category}
                </span>
              )}
              
              {frontmatter.difficulty && (
                <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getDifficultyColor(frontmatter.difficulty)}`}>
                  <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z" clip-rule="evenodd" />
                  </svg>
                  {frontmatter.difficulty}
                </span>
              )}
              
              {frontmatter.featured && (
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">
                  <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  Featured
                </span>
              )}
              
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300">
                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                </svg>
                {getWordCount(frontmatter.description)} words
              </span>
            </div>

            <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6 leading-tight">
              {frontmatter.title}
            </h1>

            <!-- Author Section -->
            <div class="flex items-start space-x-4 mb-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
              {frontmatter.authorImage ? (
                <img 
                  src={frontmatter.authorImage} 
                  alt={frontmatter.author || 'Author'}
                  class="w-12 h-12 rounded-full object-cover"
                  loading="lazy"
                />
              ) : (
                <div class="w-12 h-12 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center">
                  <svg class="w-6 h-6 text-gray-600 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                  </svg>
                </div>
              )}
              <div class="flex-1">
                <div class="flex items-center space-x-2 mb-1">
                  <h3 class="font-semibold text-gray-900 dark:text-white">
                    {frontmatter.author || 'Kotacom Team'}
                  </h3>
                  <span class="text-sm text-gray-500 dark:text-gray-400">•</span>
                  <time class="text-sm text-gray-500 dark:text-gray-400">
                    {formatDate(frontmatter.publishDate)}
                  </time>
                </div>
                {frontmatter.authorBio && (
                  <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                    {frontmatter.authorBio}
                  </p>
                )}
                <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                  <div class="flex items-center space-x-1">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                    </svg>
                    <span>{frontmatter.readingTime || calculateReadingTime(frontmatter.description)} min read</span>
                  </div>
                  
                  {frontmatter.updateDate && frontmatter.updateDate !== frontmatter.publishDate && (
                    <div class="flex items-center space-x-1">
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
                      </svg>
                      <span>Updated {formatDate(frontmatter.updateDate)}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          <!-- Featured Image -->
          {frontmatter.image && (
            <div class="mb-8">
              <img 
                src={frontmatter.image} 
                alt={frontmatter.imageAlt || frontmatter.title}
                class="w-full h-64 md:h-96 object-cover rounded-lg shadow-lg"
                loading="eager"
                decoding="async"
              />
            </div>
          )}

          <!-- Table of Contents (if enabled) -->
          {frontmatter.tableOfContents && (
            <div class="mb-8 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h6a1 1 0 110 2H4a1 1 0 01-1-1zM3 16a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" />
                </svg>
                Table of Contents
              </h3>
              <div id="table-of-contents" class="prose prose-sm dark:prose-invert">
                <!-- Table of contents will be generated by JavaScript -->
              </div>
            </div>
          )}

          <!-- Article Content -->
          <div class="prose prose-lg dark:prose-invert max-w-none mb-12" id="article-content">
            <slot />
          </div>

          <!-- Progress Bar -->
          <div class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700 z-50">
            <div id="reading-progress" class="h-full bg-blue-600 transition-all duration-300 ease-out" style="width: 0%"></div>
          </div>

          <!-- Tags -->
          {frontmatter.tags && frontmatter.tags.length > 0 && (
            <div class="mb-8">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Tags</h3>
              <div class="flex flex-wrap gap-2">
                {frontmatter.tags.map((tag) => (
                  <a 
                    href={`/tag/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                    class="inline-flex items-center px-3 py-1 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-100 dark:bg-blue-900 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors duration-200"
                  >
                    #{tag}
                  </a>
                ))}
              </div>
            </div>
          )}

          <!-- Social Share -->
          <div class="mb-12 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Share this article</h3>
            <div class="flex space-x-4">
              <a 
                href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(frontmatter.title)}&url=${encodeURIComponent(canonicalUrl)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                </svg>
                Twitter
              </a>
              
              <a 
                href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(canonicalUrl)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                </svg>
                Facebook
              </a>
              
              <a 
                href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(canonicalUrl)}`}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-800 transition-colors duration-200"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
                LinkedIn
              </a>
            </div>
          </div>

          <!-- Related Posts -->
          {relatedPosts.length > 0 && (
            <div class="mb-12">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Related Articles</h3>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                {relatedPosts.map((post) => (
                  <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden transition-all duration-300">
                    <div class="aspect-video bg-gray-200 dark:bg-gray-700 overflow-hidden">
                      {post.data.image ? (
                        <img 
                          src={post.data.image} 
                          alt={post.data.imageAlt || post.data.title}
                          class="w-full h-full object-cover"
                          loading="lazy"
                          decoding="async"
                        />
                      ) : (
                        <div class="w-full h-full bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600 flex items-center justify-center">
                          <svg class="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
                          </svg>
                        </div>
                      )}
                    </div>
                    <div class="p-4">
                      <h4 class="font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2">
                        <a href={`/${post.slug}`} class="hover:text-blue-600 dark:hover:text-blue-400">
                          {post.data.title}
                        </a>
                      </h4>
                      <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
                        {post.data.description}
                      </p>
                      <div class="mt-3 text-xs text-gray-500 dark:text-gray-400">
                        {formatDate(post.data.publishDate || post.data.date)}
                      </div>
                    </div>
                  </article>
                ))}
              </div>
            </div>
          )}

          <!-- Series Navigation (Previous/Next) -->
          {(previousPost || nextPost) && (
            <div class="mb-12 grid grid-cols-1 md:grid-cols-2 gap-4">
              {previousPost ? (
                <a 
                  href={`/${previousPost.slug}`}
                  class="flex items-center p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-lg transition-all duration-300 group"
                >
                  <div class="flex-shrink-0 mr-4">
                    <svg class="w-6 h-6 text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="flex-1 min-w-0">
                    <p class="text-sm text-gray-500 dark:text-gray-400 mb-1">Previous in series</p>
                    <h4 class="font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 line-clamp-2">
                      {previousPost.data.title}
                    </h4>
                  </div>
                </a>
              ) : (
                <div></div>
              )}
              
              {nextPost && (
                <a 
                  href={`/${nextPost.slug}`}
                  class="flex items-center p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-lg transition-all duration-300 group text-right"
                >
                  <div class="flex-1 min-w-0">
                    <p class="text-sm text-gray-500 dark:text-gray-400 mb-1">Next in series</p>
                    <h4 class="font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 line-clamp-2">
                      {nextPost.data.title}
                    </h4>
                  </div>
                  <div class="flex-shrink-0 ml-4">
                    <svg class="w-6 h-6 text-gray-400 group-hover:text-blue-600 dark:group-hover:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </a>
              )}
            </div>
          )}

          <!-- Comments Section Placeholder -->
          <div class="mb-12 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Comments</h3>
            <div class="text-center py-8">
              <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd" />
              </svg>
              <p class="text-gray-600 dark:text-gray-400 mb-4">Comments coming soon!</p>
              <p class="text-sm text-gray-500 dark:text-gray-500">
                We're working on implementing a comment system. In the meantime, feel free to reach out to us on social media.
              </p>
            </div>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1">
          <CategorySidebar />
        </div>
      </div>
    </article>
  </div>
</Layout>

<!-- Enhanced JavaScript for Blog Post Features -->
<script>
  // Reading Progress Bar
  function updateReadingProgress() {
    const article = document.getElementById('article-content');
    const progressBar = document.getElementById('reading-progress');
    
    if (!article || !progressBar) return;
    
    const scrollTop = window.scrollY;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    
    progressBar.style.width = Math.min(scrollPercent, 100) + '%';
  }

  // Table of Contents Generator
  function generateTableOfContents() {
    const tocContainer = document.getElementById('table-of-contents');
    const article = document.getElementById('article-content');
    
    if (!tocContainer || !article) return;
    
    const headings = article.querySelectorAll('h2, h3, h4, h5, h6');
    
    if (headings.length === 0) {
      tocContainer.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-sm">No headings found in this article.</p>';
      return;
    }
    
    let tocHTML = '<ul class="space-y-2">';
    
    headings.forEach((heading, index) => {
      const id = heading.id || `heading-${index}`;
      heading.id = id;
      
      const level = parseInt(heading.tagName.substring(1));
      const indent = (level - 2) * 16; // 16px per level starting from h2
      
      tocHTML += `
        <li style="margin-left: ${indent}px">
          <a href="#${id}" class="text-sm text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 block py-1">
            ${heading.textContent}
          </a>
        </li>
      `;
    });
    
    tocHTML += '</ul>';
    tocContainer.innerHTML = tocHTML;
    
    // Add smooth scrolling to TOC links
    tocContainer.addEventListener('click', (e) => {
      if (e.target.tagName === 'A') {
        e.preventDefault();
        const targetId = e.target.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      }
    });
  }

  // Copy Code Blocks
  function addCopyButtons() {
    const codeBlocks = document.querySelectorAll('pre code');
    
    codeBlocks.forEach((codeBlock) => {
      const pre = codeBlock.parentElement;
      const button = document.createElement('button');
      
      button.className = 'absolute top-2 right-2 px-3 py-1 text-xs bg-gray-700 text-white rounded hover:bg-gray-600 transition-colors duration-200';
      button.textContent = 'Copy';
      
      pre.style.position = 'relative';
      pre.appendChild(button);
      
      button.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(codeBlock.textContent);
          button.textContent = 'Copied!';
          button.className = button.className.replace('bg-gray-700 hover:bg-gray-600', 'bg-green-600 hover:bg-green-500');
          
          setTimeout(() => {
            button.textContent = 'Copy';
            button.className = button.className.replace('bg-green-600 hover:bg-green-500', 'bg-gray-700 hover:bg-gray-600');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy text: ', err);
        }
      });
    });
  }

  // Image Lazy Loading Enhancement
  function enhanceImages() {
    const images = document.querySelectorAll('img');
    
    images.forEach((img) => {
      img.addEventListener('load', () => {
        img.classList.add('loaded');
      });
      
      // Add loading placeholder
      if (!img.complete) {
        img.style.backgroundColor = '#f3f4f6';
        img.style.minHeight = '200px';
      }
    });
  }

  // Initialize all features
  document.addEventListener('DOMContentLoaded', () => {
    updateReadingProgress();
    generateTableOfContents();
    addCopyButtons();
    enhanceImages();
  });

  // Update progress on scroll
  window.addEventListener('scroll', updateReadingProgress);
  window.addEventListener('resize', updateReadingProgress);
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>